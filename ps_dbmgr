#!/usr/bin/python
# -*- coding: utf-8 -*-
'''
@date: 2011-11-16
@author: shell.xu
'''
import os, sys, getopt
import segment

dbname = 'frq.db'

def create(filepath):
    ddb = segment.dictdb()
    ddb.importtxt(filepath)
    ddb.savefile(dbname)

def importdb(filepath):
    ddb = segment.dictdb(dbname)
    ddb.importtxt(filepath)
    ddb.sync()

def exportdb(filepath):
    ddb = segment.dictdb(dbname)
    with open(filepath, 'w') as fo: ddb.exporttxt(fo)

def add(word, frq):
    ddb = segment.dictdb(dbname)
    ddb.add(word.decode('utf-8'), float(frq))
    ddb.sync()

def remove(word):
    ddb = segment.dictdb(dbname)
    ddb.remove(word.decode('utf-8'))
    ddb.sync()

def lookup(word):
    ddb = segment.dictdb(dbname)
    word = word.decode('utf-8')
    if len(word) == 1: print word, ddb.gets(word)
    else: print word, ddb.get(word)

def cals(word):
    ddb = segment.dictdb(dbname)
    word = word.decode('utf-8')
    print word, ddb.cals(word)

def stat():
    ddb = segment.dictdb(dbname)
    count, sumval = len(list(ddb.values())), sum(ddb.values())
    print 'count: %d\nsumvalue: %f' % (count, sumval)
    print 'avgvalue: %f\nmaxvalue: %f' % (sumval / count, max(ddb.values()))

def waterlevel(wl):
    ddb = segment.dictdb(dbname)
    print ddb.waterlevel(float(wl))

def reduce(factor):
    ddb = segment.dictdb(dbname)
    ddb.reduce(float(factor))
    ddb.sync()

def shrink(threshold):
    ddb = segment.dictdb(dbname)
    ddb.shrink(float(threshold))
    ddb.sync()

def trans_cedict(infile, outfile):
    words = set()
    with open(infile, 'r') as fi:
        for line in fi:
            if line.startswith('#'): continue
            word = line.split()[1].decode('utf-8')
            if len(word) > 1: words.add(word)
    with open(outfile, 'w') as fo:
        for word in list(words):
            fo.write((u'%s 1\n' % word).encode('utf-8'))

def trans_plain(infile, outfile):
    words = set()
    with open(infile, 'r') as fi:
        for line in fi:
            if line.startswith('#'): continue
            word = line.decode('utf-8').strip()
            if len(word) > 1: words.add(word)
    with open(outfile, 'w') as fo:
        for word in list(words):
            fo.write((u'%s 1\n' % word).encode('utf-8'))

cmds = ['create', 'importdb', 'exportdb', 'add', 'remove',
        'lookup', 'cals', 'stat', 'waterlevel', 'reduce', 'shrink',
        'trans_cedict', 'trans_plain']
def main():
    opts, args = getopt.getopt(sys.argv[1:], 'd:')
    for opt, val in opts:
        if opt == '-d':
            global dbname
            dbname = val
    if len(args) == 0:
        print '%s cmds params ...' % sys.argv[0]
        for name in cmds: print '%s:%s' % (name, eval(name).__doc__)
    else: eval(args[0])(*args[1:])

if __name__ == '__main__': main()
